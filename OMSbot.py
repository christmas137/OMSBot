import logging
import requests
import os
from dotenv import load_dotenv
import socket
import sqlite3
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from orders import cancel_order, cancel_self_reg_order, cancel_return_order, cancel_replacement_order, \
    cancel_lending_order, cancel_ecom_order


load_dotenv()
# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
TELEGRAM_TOKEN = os.getenv('TG_BOT_TOKEN')

authorized_users_str = os.getenv('AUTHORIZED_USERS')
AUTHORIZED_USERS = list(map(int, authorized_users_str.split(',')))

def is_domain_reachable(domain):
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è
        socket.gethostbyname(domain)
        return True
    except socket.error:
        return False


# –í—ã–±–æ—Ä –¥–æ–º–µ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
if is_domain_reachable('rrpoms.pmru.local'):
    domain = 'rrpoms.pmru.local'
else:
    domain = 'SecurePortalPMRU.myizhora.com'

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)


async def start(update: Update, context: CallbackContext) -> None:
    user_name = update.message.from_user.first_name
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {user_name}üëã \n'
        '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.')


def normalize_order_id(order_id: str) -> str:
    replacements = {
        '–æ': 'O', '–û': 'O',  # –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è '–û' –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫—É—é 'O'
        '–≤': 'B', '–í': 'B',  # –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è '–í' –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫—É—é 'B'
        ' ': '', '-': '-'
    }

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É –∏ –∑–∞–º–µ–Ω—è–µ–º –≤ order_id
    for cyrillic_char, latin_char in replacements.items():
        order_id = order_id.replace(cyrillic_char, latin_char)

    return order_id.upper()


async def handle_message(update: Update, context: CallbackContext) -> None:
    if update.message is None:
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if user_id not in AUTHORIZED_USERS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return

    order_id = update.message.text.strip()
    order_id = normalize_order_id(order_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
    if order_id.startswith("OB-"):
        response = cancel_order(order_id)
    elif order_id.startswith("OQ-"):
        response = cancel_self_reg_order(order_id)
    elif order_id.startswith("FB-"):
        response = cancel_return_order(order_id)
    elif order_id.startswith("RB-"):
        response = cancel_replacement_order(order_id)
    elif order_id.startswith("LB-"):
        response = cancel_lending_order(order_id)
    elif order_id.startswith("OE-"):
        response = cancel_ecom_order(order_id)
    else:
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–∞
    save_order_history(user_id, order_id, response.status_code, response.text)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
    if response.status_code == 200:
        await update.message.reply_text(text=f"<code>–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ó–∞–∫–∞–∑ {order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.</code>",
                                        parse_mode='HTML')
    else:
        await update.message.reply_text(text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ {order_id}:\n"
                                             f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: <b>{response.status_code} \n</b>"
                                             f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}",
                                        parse_mode='HTML')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤ SQLite
def create_tables():
    conn = sqlite3.connect('orders.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS order_history (
            user_id INTEGER,
            order_id TEXT,
            status_code INTEGER,
            response_text TEXT
        )
    ''')
    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –≤ SQLite
def save_order_history(user_id, order_id, status_code, response_text):
    conn = sqlite3.connect('orders.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO order_history (user_id, order_id, status_code, response_text)
        VALUES (?, ?, ?, ?)
    ''', (user_id, order_id, status_code, response_text))
    conn.commit()
    conn.close()


def main() -> None:
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    create_tables()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logging.getLogger("telegram").setLevel(logging.DEBUG)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(drop_pending_updates=True)


if __name__ == '__main__':
    main()